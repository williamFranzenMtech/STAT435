hospital_dfrm <- c(hospital_dfrm, ageweight)
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
# Adding columns to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
age <- c(65, 48, 43, 29, 77, 52, 35)
hospital_dfrm[["age"]] <- age
hospital_dfrm
weight <- c(148, 205, 218, 195, 226, 164, 181)
hospital_dfrm <- cbind(hospital_dfrm, weight)
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding columns to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", pain = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
matthew <- data.frame(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205)
carol <- data.frame(patients = "Carol", pain = "medium", gender = "F", age = 60, weight = 137)
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
# Adding rows to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
age <- c(65, 48, 43, 29, 77, 52, 35)
hospital_dfrm[["age"]] <- age
hospital_dfrm
weight <- c(148, 205, 218, 195, 226, 164, 181)
hospital_dfrm <- cbind(hospital_dfrm, weight)
newrow <- data.frame(patients = c("Matthew", "Carol"),
pain = c("mild", "medium"),
gender = c("M", "F"),
age = c(81, 60),
weight = c(205, 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, newrow)
hospital_dfrm
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
hospital_dfrm[order(hospital_dfrm$age, decreasing = TRUE)]
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
hospital_dfrm[order(hospital_dfrm$age, decreasing = TRUE), ]
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
temp
hospital_dfrm <- temp
hospital_dfrm
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
temp
hospital_dfrm <- temp
hospital_dfrm
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
studyhHours = c(2, 10, 9, 5, 8),
Gender = factor(c("M", "F", "F", "M", "M")))
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
mydata2 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
examScore = c(5, 10, 15, 20, 25),
Time = c(30, 40, 15, 25, 32))
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
studyhHours = c(2, 10, 9, 5, 8),
Gender = factor(c("M", "F", "F", "M", "M")))
mydata2 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
examScore = c(5, 10, 15, 20, 25),
Time = c(30, 40, 15, 25, 32))
?merge
mydata3 <- merge(mydata1, mydata2, by = "studentName")
mydata3
# Accessing individual columns
plot(mydata3$studyhHours, mydata3$examScore)
# Accessing by using with() ----
with(data = mydata3, expr = plot(studyhHours, examScore))
with(mydata3, mean(studyhHours))
summary(mydata3$examScore[mydata3$Gender == "M"])
with(mydata3, mean(examScore))
with(mydata3[mydata3$Gender == "M"], mean(examScore))
with(mydata3[mydata3$Gender == "M",], mean(examScore))
summary(mydata3$examScore[mydata3$Gender == "M"])
with(mydata3[mydata3$Gender == "M",], mean(examScore))
with(mydata3, summary(examScore[Gender == "M"]))
with(mydata3, summary(examScore[Gender == "M"]))
with(mydata3, summary(examScore[Gender == "F"]))
rm(list = ls())
planets <- c("Earth", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(1, 0.382, 0.949, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(1, 58.64, -243.02, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planets_df <- data.frame(list(planets, type, diameter, rotation, rings))
planets_df
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
planets_df
# b: Use str() to make sure there are 8 observations and5 variables
str(planets_df)
# a: Encode the type as a factor.
typefac <- as.factor(type)
typefac
# b: Overwrite the type in the planets_df with the new factor
planets_df[["type"]] <- typefac
planets_df
# c: Display the structure of planets_df to make sure it's right
str(planets_df)
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
planets_df
# a: Select the type of Jupiter
planets_d[["Jupiter", "TYPE"]]
# a: Select the type of Jupiter
planets_df[["Jupiter", "TYPE"]]
# a: Select the type of Jupiter
planets_df[[5, "TYPE"]]
# b: Store the entire rotation column as a vector and print it
rotationvec <- planets_df$ROTATION
rotationvec
# c: Create a data frame closest_planets_df for the first three planets
closest_planets_df <- planets_df[c(2, 3, 1), ]
closest_planets_df
# d: Create a dataframe furthest_planets_df for the last three planets
furthest_planets_df <- planets_df[c(6, 7, 8), ]
furthest_planets_df
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[2, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[c("DIAMETER", "ROTATION"), ]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, c(3, 4)]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, "DIAMETER"]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, "DIAMETER"]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER", "ROTATION")]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("ROTATION")]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- select(planets_df[3], c("DIAMETER", "ROTATION"))
?select
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[3, c("DIAMETER", "ROTATION")]
venus_data
# f: Select the last 5 rows of only DIAMETER and assign it to furthest_planets_diameter
planets_df
# f: Select the last 5 rows of only DIAMETER and assign it to furthest_planets_diameter, then print it
furthest_planets_diameter <- planets_df[4:8, "DIAMETER"]
furthest_planets_diameter
# g: Use the $ to create rings_vector that contains all the HAS_RINGS values.
rings_vector <- planets_df$HAS_RINGS
rings_vector
?subset
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, select = HAS_RINGS)
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, select = (HAS_RINGS == TRUE))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, subset = (HAS_RINGS == TRUEs))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, subset = (HAS_RINGS == TRUE))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, (HAS_RINGS == TRUE))
planets_with_rings_df
# i: Create a dataframe small_planets_df with planets that have a smaller diameter than Earth.
small_planets_df <- subset(planets_df, (DIAMETER < 1.0))
small_planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (ROTATION > 1.0))
slow_planets_df
planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (ROTATION > 1.0))
slow_planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (abs(ROTATION) > 1.0))
slow_planets_df
# Q3: stu_surveys.pdf ----
# a: Create an empty dataframe, name it survey.
survey <- data.frame()
# b: Use edit() to enter the data from the pdf into the survey dataframe.
newsurvey <- edit(survey)
# c: Print the entered data.
newsurvey
# d: Write the dataframe to a survey.csv file.
write.csv(newsurvey, file = "survey.csv", quote = FALSE, row.names = FALSE)
# e: Read this csv into survey_in
survey_in <- read.csv(file = "survey.csv")
# f: Display the structure of this dataframe.
str(survey_in)
# g: Calculate statistics
summary(survey_in)
# g: Calculate statistics
summary(survey_in$age)
# f: Display the structure of this dataframe.
str(survey_in)
# g: Calculate statistics
summary(survey_in$age)
# h: Percentage of students who slept at least 7 hours
survey_in$sleephours
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = FALSE)
beef
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = TRUE)
beef
# Print data from 1990 to 2000
beef.demand.sub <- subset(beef, select = beef$Year, subset = (beef$Year >= 1990 & beef$Year <= 2000))
?subset
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990)))
beef.demand.sub
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
setwd("~/R Stuff/LA6_WFranzen")
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 9, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# d: Convert Reason and Month into factors using relevant labels.
HCC$Reason <- factor(HCC$Reason, levels = c(1, 2), labels = c("normal", "other"))
HCC$Month <- factor(HCC$Month, levels = 1:6, labels = c("January", "February", "March", "April", "May", "June"))
# e: Check the structure again.
str(HCC)
# f: Use head() to look at the first 5 entries. Use tail() to look at the last 7 entries for the first and third variables.
head(HCC, n = 5)
?read.table
tail(HCC[,c(1,3)], n = 7)
# g: Write a command that will give the average length of the stays for April.
with(HCC,
mean(subset(HCC, subset = (Month == "April"), select = Length)[[1]])
)
# h: Write a command that will give the longest stay for a normal discharge in January.
with(HCC,
max(subset(HCC, subset = (Month == "January" & Reason == "normal"))[[3]])
)
rm(list=ls())
# Q2: Install and load dslabs ----
install.packages("dslabs")
library(dslabs)
# a: Use ?murders and look at the documentation.
?murders
# b: Using sink(), create sumstats.txt.
sink("sumstats.txt")
# c: Add the statistics for murders for the South region.
cat("Summary Statistics on No. Gun Murders in the South", "\n")
summary(
subset(murders, subset = (region == "South"), select = total)
)
# d: Leave a blank line, then the statistics for murders for the West region.
cat("\n", "Summary Statistics on No. of Gun Murders in the West", "\n")
summary(
subset(murders, subset = (region == "West"), select = total)
)
# e: Use sink() to close the sink
sink()
murders
subset(murders, subset = (region == "South"), select = total)
subset(murders, subset = (region == "South")
)
subset(murders, subset = (region == "South"))
subset(murders, subset = (region == "South"), select = total)
subset(murders, subset = (region == "South"))
subset(murders, subset = (region == "West"))
# f: Use write.table() to write the murders to a new file murdersUS.txt.
write.table(murders, file = "murdersUS.txt", quote = FALSE, sep = "\t", row.names = FALSE)
newsurvey <- read.csv("survey.csv")
# c: Print the entered data.
newsurvey
# b: Use edit() to enter the data from the pdf into the survey dataframe.
newsurvey <- edit(newsurvey)
# c: Print the entered data.
newsurvey
# d: Write the dataframe to a survey.csv file.
write.csv(newsurvey, file = "survey.csv", quote = FALSE, row.names = FALSE)
# e: Read this csv into survey_in
survey_in <- read.csv(file = "survey.csv")
# f: Display the structure of this dataframe.
str(survey_in)
# g: Calculate statistics
summary(survey_in$age)
# h: Percentage of students who slept at least 7 hours
survey_in$sleephours
# h: Percentage of students who slept at least 7 hours
survey_in$sleephours >= 7
# h: Percentage of students who slept at least 7 hours
sum(survey_in$sleephours >= 7)
# h: Percentage of students who slept at least 7 hours
sum(survey_in$sleephours >= 7) / len(survey_in$sleephours)
# h: Percentage of students who slept at least 7 hours
sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = TRUE)
beef
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
?read.table
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000), select = c("Year")))
beef.demand.sub
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
# h: Percentage of students who slept at least 7 hours
100 * sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = TRUE)
beef
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
# f: Display the structure of this dataframe.
str(survey_in)
# g: Calculate statistics
summary(survey_in$age)
# g: Calculate statistics
summary(survey_in$age / 12)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 9, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# h: Percentage of students who slept at least 7 hours
100 * sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
survey_in$sleephours
# h: Percentage of students who slept at least 7 hours
100 * sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = TRUE)
beef
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
# f: Display the structure of this dataframe.
str(survey_in)
# c: Add the statistics for murders for the South region.
cat("Summary Statistics on No. Gun Murders in the South", "\n")
summary(
subset(murders, subset = (region == "South"), select = total)
)
# d: Leave a blank line, then the statistics for murders for the West region.
cat("\n", "Summary Statistics on No. of Gun Murders in the West", "\n")
summary(
subset(murders, subset = (region == "West"), select = total)
)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 8, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 9, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 7, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", header = TRUE)
# b: Using read.table() to store the data to a dataframe.
HCC <- read.table(file = "HCC.txt", skip = 9, header = TRUE)
# c: Displaying the structure of the dataframe
str(HCC)
# d: Convert Reason and Month into factors using relevant labels.
HCC$Reason <- factor(HCC$Reason, levels = c(1, 2), labels = c("normal", "other"))
HCC$Month <- factor(HCC$Month, levels = 1:6, labels = c("January", "February", "March", "April", "May", "June"))
# e: Check the structure again.
str(HCC)
# f: Use head() to look at the first 5 entries. Use tail() to look at the last 7 entries for the first and third variables.
head(HCC, n = 5)
tail(HCC[,c(1,3)], n = 7)
# g: Write a command that will give the average length of the stays for April.
with(HCC,
mean(subset(HCC, subset = (Month == "April"), select = Length)[[1]])
)
# h: Write a command that will give the longest stay for a normal discharge in January.
with(HCC,
max(subset(HCC, subset = (Month == "January" & Reason == "normal"))[[3]])
)
# c: Print the entered data.
newsurvey
# d: Write the dataframe to a survey.csv file.
write.csv(newsurvey, file = "survey.csv", quote = FALSE, row.names = FALSE)
# e: Read this csv into survey_in
survey_in <- read.csv(file = "survey.csv")
# f: Display the structure of this dataframe. 5 obs, 18 variables.
str(survey_in)
# g: Calculate statistics for age in years.
summary(survey_in$age / 12)
# h: Percentage of students who slept at least 7 hours
100 * sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
# Q4: Reading remote files ----
beef <- read.table(file = "http://jse.amstat.org/v22n1/kopcso/BeefDemand.txt", header = TRUE)
beef
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990 & Year <= 2000)))
beef.demand.sub
# h: Percentage of students who slept at least 7 hours
100 * sum(survey_in$sleephours >= 7) / length(survey_in$sleephours)
# Print data from 1990 to 2000
beef.demand.sub <- with(beef, subset(beef, subset = (Year >= 1990)))
beef.demand.sub
summary(
subset(murders, subset = (region == "South"), select = total)
)
summary(
murders$total[murders$region == "South"]
#subset(murders, subset = (region == "South"), select = total)
)
# b: Using sink(), create sumstats.txt.
sink("sumstats.txt")
# c: Add the statistics for murders for the South region.
cat("Summary Statistics on No. Gun Murders in the South", "\n")
summary(
murders$total[murders$region == "South"]
#subset(murders, subset = (region == "South"), select = total)
)
# d: Leave a blank line, then the statistics for murders for the West region.
cat("\n", "Summary Statistics on No. of Gun Murders in the West", "\n")
summary(
murders$total[murders$region == "West"]
#subset(murders, subset = (region == "West"), select = total)
)
# e: Use sink() to close the sink
sink()
# f: Use write.table() to write the murders to a new file murdersUS.txt.
write.table(murders, file = "murdersUS.txt", quote = FALSE, sep = "\t", row.names = FALSE)
# e: Use sink() to close the sink
sink()
# e: Use sink() to close the sink
sink()
# c: Print the entered data.
newsurvey
