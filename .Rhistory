fourth_review
# Write the command that returns "Scatman Crothers"
shining_list[[2]][3]
# Write the command that returns only the "Bad" reviews
shining_list[[3]][shining_list[[3]] == "Bad"]
# Add the release year under the name "year" and director under "director"
shining_list$year <- 1980
shining_list$director <- "Stanley Kubrick"
# Print the shining_list
shining_list
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
shining_list
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
names(shining_list_ext[[6]]) <- "opinions"
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- list(shining_list, list("Hate it!", "Love it!"))
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
shining_list_ext
?list
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
names(shining_list_ext)[6] <- "opinions"
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, list("Hate it!", "Love it!"))
names(shining_list_ext)[[6]] <- "opinions"
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, opinions = list("Hate it!", "Love it!"))
shining_list_ext
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, opinions = list(c("Hate it!", "Love it!")))
shining_list_ext
# 1a ----
shining_list <- list(title = "The Shining",
actors = c("Jack Nicholson", "Shelley Duvall", "Scatman Crothers", "Danny Lloyd", "Barry Nelson"),
reviews = factor(c("Good", "Perfect", "Bad", "Good", "OK", "Perfect", "Good"),
levels = c("Bad", "OK", "Good", "Perfect"), ordered = TRUE)
)
shining_list
# Select the actors from shining_list, assign the result to act and print it.
act <- shining_list[[2]]
act
# Create a new list containing only the title and reviews to sublist.
sublist <- shining_list[c(1,3)]
sublist
# Display the structure of sublist.
str(sublist)
# Select from the shining_list the first actor, assign it to first_actor and print it.
first_actor <- shining_list[[2]][1]
first_actor
# Select from the shining_list the fourth review, assign it to fourth_review and print it.
fourth_review <- shining_list[[3]][4]
fourth_review
# Write the command that returns "Scatman Crothers"
shining_list[[2]][3]
# Write the command that returns only the "Bad" reviews
shining_list[[3]][shining_list[[3]] == "Bad"]
# Add the release year under the name "year" and director under "director"
shining_list$year <- 1980
shining_list$director <- "Stanley Kubrick"
# Print the shining_list
shining_list
# Display the structure of shining_list
str(shining_list)
# Extend the list with a list of opinions "Hate it!" and "Love it!"
shining_list_ext <- c(shining_list, opinions = list(c("Hate it!", "Love it!")))
shining_list_ext
# 2a ----
my.list <- list(
mydays = c("Monday", "Tuesday", "Thursday", "Friday"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(c(1:8), nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2a ----
# Making the list with its names.
my.list <- list(
mydays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(c(1:8), nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2a ----
# Making the list with its names.
my.list <- list(
mydays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(1:8, nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2a ----
# Making the list with its names.
my.list <- list(
mydays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(1:8, nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2b ----
# Extend mydays by adding "Sat" and "Sun" to it
my.list$mydays <- c(my.list$mydays, "Sat", "Sun")
my.list$mydays
?letters
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- letters(1:8)
my.list$myletters
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- LETTERS(1:8)
my.list$myletters
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- LETTERS
my.list$myletters
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- letters
my.list$myletters
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- letters[1:8]
my.list$myletters
# 2a ----
# Making the list with its names.
my.list <- list(
mydays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(1:8, nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2b ----
# Extend mydays by adding "Sat" and "Sun" to it
my.list$mydays <- c(my.list$mydays, "Sat", "Sun")
my.list
my.list$mydays
# 2c ---
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- letters[1:8]
# Printing my.list
my.list
# 2d ----
# Use one line of code to select all elements in myvector that are greater than or equal to five and calculate their median
my.list$myvector
# 2d ----
# Use one line of code to select all elements in myvector that are greater than or equal to five and calculate their median
my.list$myvector[my.list$myvector >= 5]
# 2d ----
# Use one line of code to select all elements in myvector that are greater than or equal to five and calculate their median
median(my.list$myvector[my.list$myvector >= 5])
# 2e ----
# Use one line to find the proportion of observations with negative values
my.list$myvector[my.list$myvector < 0]
?length
# 2e ----
# Use one line to find the proportion of observations with negative values
length(my.list$myvector[my.list$myvector < 0]) / length(my.list$myvector)
# 2f ----
# Overwrite mymatrix
my.list$mymatrix
# 2f ----
# Use one line of code to overwrite mymatrix
my.list$mymatrix <- t(my.list$mymatrix)
my.list$mymatrix
# 2f ----
# Use one line of code to overwrite mymatrix
my.list$mymatrix <- rbind(t(my.list$mymatrix), c(10:13))
my.list$mymatrix
# 2f ----
# Use one line of code to overwrite mymatrix
my.list$mymatrix <- rbind(t(my.list$mymatrix), 10:13)
my.list$mymatrix
# 2a ----
# Making the list with its names.
my.list <- list(
mydays = c("Mon", "Tue", "Wed", "Thu", "Fri"),
myvector = c(5, -2, 4, 4, 7, -6, -9, 3, 8, 7),
mymatrix = matrix(1:8, nrow = 4, ncol = 2, byrow = TRUE)
)
my.list
# 2b ----
# Extend mydays by adding "Sat" and "Sun" to it
my.list$mydays <- c(my.list$mydays, "Sat", "Sun")
my.list$mydays
# 2c ----
# Use the built-in letters function to add a-h as a fourth component.
my.list$myletters <- letters[1:8]
# Printing my.list
my.list
# 2d ----
# Use one line of code to select all elements in myvector that are greater than or equal to five and calculate their median
median(my.list$myvector[my.list$myvector >= 5])
# 2e ----
# Use one line to find the proportion of observations with negative values
length(my.list$myvector[my.list$myvector < 0]) / length(my.list$myvector)
# 2f ----
# Use one line of code to overwrite mymatrix
my.list$mymatrix <- rbind(t(my.list$mymatrix), 10:13)
my.list$mymatrix
my.list
# 2g ----
# Overwrite the second row in the matrix from largest to smallest
my.list$mymatrix[2,]
# 2g ----
# Overwrite the second row in the matrix from largest to smallest
sort(my.list$mymatrix[2,])
?sort
# 2g ----
# Overwrite the second row in the matrix from largest to smallest
sort(my.list$mymatrix[2,], decreasing = TRUE)
# 2g ----
# Overwrite the second row in the matrix from largest to smallest
my.list$mymatrix[2,] <- sort(my.list$mymatrix[2,], decreasing = TRUE)
my.list$mymatrix
my.list
# 2h ----
# Remove the first and third components of my.list and print it
my.list <- my.list[c(-1, -3)]
my.list
# Data Frames
name <- c("Anne", "Pete", "Frank", "Julia", "Catch")
age <- c(28, 30, 21, 39, 35)
child <- c(FALSE, TRUE, TRUE, FALSE, TRUE)
df <- data.frame(name, age, child)
df
# Naming Data Frames ----
names(df) <- c("Name", "Age", "Child")
# Structure ----
str(df)
df <- data.frame(name, age, child, stringsAsFactors = FALSE)
str(df)
# Subsetting ----
df[3, 2]
df[3, "age"]
df[3,]
df[,"age"]
df[c(3,5), c("age", "child")]
df[2]
df[2] # Returns a dataframe
df[[2]] # Returns a vector
df$age
df$age # Returns a vector
df[["age"]] # Returns a vector
df["age"]
# Adding columns ----
height <- c(163, 177, 163, 162, 157)
df$height <- height
df
df[["height"]] <- height
df
weight <- c(74, 63, 68, 55, 56)
cbind(df, weight)
rbind(df, tom)
tom <- data.frame(name = "Tom", age = 37, child = FALSE, height = 183)
rbind(df, tom)
df
cbind(df, weight)
df
tom <- data.frame(name = "Tom", age = 37, child = FALSE, height = 183)
cbind(df, weight)
df
tom <- data.frame(name = "Tom", age = 37, child = FALSE, height = 183)
rbind(df, tom)
df
# Sorting ----
sort(df$age)
ranks <- order(people$age)
ranks <- order(df$age)
df$age
ranks
df$age
df[ranks,]
df[order(ranks, decreasing = TRUE),]
df[order(df$age, decreasing = TRUE),]
planets <- c("Earth", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(1, 0.382, 0.949, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(1, 58.64, -243.02, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# a: Construct a dataframe and print it.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
planets_df
# b: Use str() to make sure there are 8 observations and5 variables
str(planets_df)
# a: Encode the type as a factor.
typefac <- as.factor(type)
typefac
# b: Overwrite the type in the planets_df with the new factor
planets_df[["type"]] <- typefac
planets_df
# c: Display the structure of planets_df to make sure it's right
str(planets_df)
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
planets_df
# a: Select the type of Jupiter
planets_df[[5, "TYPE"]]
# b: Store the entire rotation column as a vector and print it
rotationvec <- planets_df$ROTATION
rotationvec
# c: Create a data frame closest_planets_df for the first three planets
closest_planets_df <- planets_df[c(2, 3, 1), ]
closest_planets_df
# d: Create a dataframe furthest_planets_df for the last three planets
furthest_planets_df <- planets_df[c(6, 7, 8), ]
furthest_planets_df
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[3, c("DIAMETER", "ROTATION")]
venus_data
# f: Select the last 5 rows of only DIAMETER and assign it to furthest_planets_diameter, then print it
furthest_planets_diameter <- planets_df[4:8, "DIAMETER"]
furthest_planets_diameter
# g: Use the $ to create rings_vector that contains all the HAS_RINGS values.
rings_vector <- planets_df$HAS_RINGS
rings_vector
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, (HAS_RINGS == TRUE))
planets_with_rings_df
# i: Create a dataframe small_planets_df with planets that have a smaller diameter than Earth.
small_planets_df <- subset(planets_df, (DIAMETER < 1.0))
small_planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (abs(ROTATION) > 1.0))
slow_planets_df
# k: Write one line of code that identifies the planet with the smallest diameter.
# k: Write one line of code that identifies the planet with the smallest diameter.
# k: Write one line of code that identifies the planet with the smallest diameter.
# k: Write one line of code that identifies the planet with the smallest diameter.
# k: Write one line of code that identifies the planet with the smallest diameter.
# k: Write one line of code that identifies the planet with the smallest diameter.
venus_data
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["DIAMETER"]]
# k: Write one line of code that identifies the planet with the smallest diameter.
min(planets_df[["DIAMETER"]])
?select
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["NAME", min(planets_df[["DIAMETER"]])]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[[min(planets_df[["DIAMETER"]])]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["DIAMETER" == min(planets_df[["DIAMETER"]])]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["DIAMETER" == min(planets_df[["DIAMETER"]]),]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[[,"DIAMETER" == min(planets_df[["DIAMETER"]])]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["DIAMETER"]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df[["DIAMETER" == min(planets_df$DIAMETER)]]
# k: Write one line of code that identifies the planet with the smallest diameter.
planets_df["DIAMETER" == min(planets_df$DIAMETER)]
# k: Write one line of code that identifies the planet with the smallest diameter.
subset(planets_df, DIAMETER == min(planets_df$DIAMETER))
?subset
# k: Write one line of code that identifies the planet with the smallest diameter.
subset(planets_df, DIAMETER == min(planets_df$DIAMETER), NAME)
# a: Add the number of moons to planets_df
planets_df$MOON <- c(1, 0, 0, 2, 67, 62, 27, 14)
planets_df
# b: Add the mass of the planet to planets_df
planets_df$MASS <- c(1.00, 0.06, 0.82, 0.11, 317.8, 95.2, 14.6, 17.2)
planets_df
# c: Print planets_df
planets_df
# d: Display the structure of planets_df
str(planets_df)
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, HAS_RINGS && MASS > 50)
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, (HAS_RINGS == TRUE && MASS > 50))
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, (HAS_RINGS == TRUE && MASS > 50), NAME)
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, (MASS > 50), NAME)
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, (MASS > 50 && HAS_RINGS), NAME)
# e: Write one line of code that identifies the planets that have rings and mass greater than 50.
subset(planets_df, (MASS > 50 & HAS_RINGS), NAME)
?with
# f: Use with() to calculate the average number of moons for the gas giant planets.
with(planets_df, mean(MOON))
# f: Use with() to calculate the average number of moons for the gas giant planets.
gas_giants_df <- planets_df[5:8]
with(gas_giants_df, mean(MOON))
# f: Use with() to calculate the average number of moons for the gas giant planets.
gas_giants_df <- planets_df[5:8,]
with(gas_giants_df, mean(MOON))
gas_giants_df
# f: Use with() to calculate the average number of moons for the gas giant planets.
with(planets_df[[TYPE == "Gas giant"]], mean(MOON))
# f: Use with() to calculate the average number of moons for the gas giant planets.
with(planets_df[[planets_df[["TYPE"]] == "Gas giant"]], mean(MOON))
# f: Use with() to calculate the average number of moons for the gas giant planets.
with(planets_df[[planets_df["TYPE"] == "Gas giant"]], mean(MOON))
# f: Use with() to calculate the average number of moons for the gas giant planets.
planets_df
# f: Use with() to calculate the average number of moons for the gas giant planets.
planets_df[["TYPE" == "Gas giant"]]
# f: Use with() to calculate the average number of moons for the gas giant planets.
planets_df[["TYPE" == "Gas giant",]]
# f: Use with() to calculate the average number of moons for the gas giant planets.
planets_df[["TYPE" == "Gas giant"]]
# f: Use with() to calculate the average number of moons for the gas giant planets.
planets_df["TYPE" == "Gas giant"]
# f: Use with() to calculate the average number of moons for the gas giant planets.
gas_giants <- subset(planets_df, TYPE == "Gas giant")
# f: Use with() to calculate the average number of moons for the gas giant planets.
gas_giants <- subset(planets_df, TYPE == "Gas giant")
with(gas_giants, mean(MOON))
gas_giants
?do.call
# a: Create a dataframe for Pluto.
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, RINGS = FALSE)
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
# a: Create a dataframe for Pluto.
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, RINGS = FALSE)
pluto_df
do.call(cbind, c(planets_df, pluto_df))
planets_df_ext <- do.call(cbind, c(planets_df, pluto_df))
planets_df_ext
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
planets_df
planets_df_ext <- do.call(cbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
# a: Create a dataframe for Pluto.
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, RINGS = FALSE)
planets_df_ext <- do.call(rbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
planets_df_ext <- do.call(cbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
# a: Create a dataframe for Pluto.
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, RINGS = FALSE)
planets_df_ext <- do.call(cbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
planets_df
pluto_df
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, HAS_RINGS = FALSE)
planets_df
pluto_df
planets_df_ext <- do.call(cbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
planets_df_ext <- do.call(rbind, c(planets_df, pluto_df), quote = FALSE)
planets_df_ext
rbind(planets_df, pluto_df)
planets_df_ext
rbind(planets_df, pluto_df)
planets_df_ext <- rbind(planets_df, pluto_df)
planets_df_ext
planets_df_ext <- do.call(rbind, list(planets_df, pluto_df))
planets_df_ext
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, HAS_RINGS = FALSE)
planets_df_ext <- do.call(rbind, list(planets_df, pluto_df))
planets_df_ext
?order
# a: Assign the variable positions the order
positions <- order(planets_df_ext$DIAMETER)
positions
?order
# a: Assign the variable positions the order
positions <- order(planets_df_ext$DIAMETER, decreasing = TRUE)
positions
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[[order,]]
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[[,order]]
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[order,]
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[order]
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[,order]
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[positions,]
largest_first_df
# Resetting the planets to exclude the mass and moons.
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
pluto_df <- data.frame(NAME = "Pluto", TYPE = "Terrestrial planet", DIAMETER = 0.18, ROTATION = -6.38, HAS_RINGS = FALSE)
planets_df_ext <- do.call(rbind, list(planets_df, pluto_df))
planets_df_ext
# a: Assign the variable positions the order
positions <- order(planets_df_ext$DIAMETER, decreasing = TRUE)
positions
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df[positions,]
largest_first_df
# b: Create the dataframe largest_first_df using the order from the positions
largest_first_df <- planets_df_ext[positions,]
largest_first_df
