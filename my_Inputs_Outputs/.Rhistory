mydata[,]
# Subset of only male students
mydata[mydata[3] == "M",]
# Omit the last gender of the subsetted column above
mydata[mydata[3] == "M", c(-3)]
# Select the second element of StudyHours
mydata[["StudyHours"]][2]
# Select the second element of StudyHours
mydata[["StudyHours"]][2]
# StudyHours from Chris
mydata[4,2]
# Subset of only male students
mydata[mydata[3] == "M",]
# Omit the gender column of the subsetted data frame above
mydata[mydata[3] == "M", c(-3)]
# StudyHours from Chris
mydata[4,2]
mydata$StudyHours[mydata$StudentName == "Chris"]
# Subset of only male students
mydata[mydata["Gender"] == "M",]
# Omit the gender column of the subsetted data frame above
mydata[mydata["Gender"] == "M", c(-3)]
?subset
subset(x = mydata, select = StudyHours)
subset(x = mydata, select = c(StudentName, Gender))
subset(x = mydata, subset = (StudyHOurs <= 5))
subset(x = mydata, subset = (StudyHours <= 5))
subset(x = mydata, subset = (StudyHours > 5 && Gender == "F"))
subset(x = mydata, subset = (StudyHours > 5 & Gender == "F"))
# Exercise: Subset mydata keeping only StudentName and Gender with students who studied formore than 5 hours
subset(x = mydata, subset = (StudyHours > 5), select = c(StudentName, Gender))
# Exercise: Subset mydata keeping only StudentName and Gender with students who studied formore than 5 hours
subset(x = mydata,
subset = (StudyHours > 5),
select = c(StudentName, Gender))
# Converting Lists n' stuff
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "M", "F", "M"))
hospital
hospital_drfm <- data.frame(hospital)
# Converting Lists n' stuff
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital
hospital_drfm <- data.frame(hospital)
hospital_drfm
hospital_drfm <- as.data.frame(hsopital)
hospital_drfm <- as.data.frame(hospital)
hospital_drfm
str(hospital_drfm)
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
hospital_dfrm <- as.data.frame(hospital)
hospital_dfrm
str(hospital_dfrm)
# Constructing data frames from row data n' stuff ----
s1 <- data.frame(name = "Alice", age = 25, smoke = "Y")
s2 <- data.frame(name = "Fred", age = 32, smoke = "N")
s3 <- data.frame(name = "Max", age = 40, smoke = "N")
s4 <- data.frame(name = "Jesse", age = 35, smoke = "N")
s1234 <- list(s1, s2, s3, s4)
s1234
do.call(rbind, s1234)
?do.call
s1234_dfrm <- do.call(rbind, s1234)
s1234_dfrm
class(s1234_dfrm)
str(s1234_dfrm)
# Creating two-row data frame
fred.jesse_df <- do.call(what = rbind, args = s1234[c(2,4)])
fred.jesse_df
mean_age <- do.call(what = mean, args = list(s1234_dfrm))
mean_age
mean_age <- do.call(what = mean, args = list(s1234_dfrm$age))
mean_age
ixr_age <- do.call(what = IQR, args = list(s1234_dfrm$age))
iqr_age <- do.call(what = IQR, args = list(s1234_dfrm$age))
iqr_age
# Same thing, but from list origins
s1l <- list(name = "Alice", age = 25, smoke = "Y")
s2l <- list(name = "Fred", age = 32, smoke = "N")
s3l <- list(name = "Max", age = 40, smoke = "N")
s4l <- list(name = "Jesse", age = 35, smoke = "N")
s1234l <- list (s1l, s2l, s3l, s4l)
s1234l
do.call(rbind, Map(as.data.frame, s1234l))
s1234l_dfrm <- do.call(rbind, Map(as.data.frame, s1234l))
s1234l_dfrm
# Adding columns to an existing dataframe
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
age <- c(65, 48, 43, 29, 77, 52, 35)
hospital_dfrm[["age"]] <- age
hospital_dfrm
weight <- c(148, 205, 218, 195, 226, 164, 181)
weight <- c(148, 205, 218, 195, 226, 164, 181)
cbind(hospital_dfrm, weight)
ageweight <- data.frame(c(age, weight))
ageweight
ageweight <- data.frame(list(age, weight))
ageweight
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- c(hospital_dfrm, ageweight)
hospital_dfrm
# Adding columns to an existing dataframe
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- c(hospital_dfrm, ageweight)
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
# Adding columns to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
age <- c(65, 48, 43, 29, 77, 52, 35)
hospital_dfrm[["age"]] <- age
hospital_dfrm
weight <- c(148, 205, 218, 195, 226, 164, 181)
hospital_dfrm <- cbind(hospital_dfrm, weight)
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding columns to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
ageweight <- data.frame(list(age = age, weight = weight))
ageweight
hospital_dfrm <- cbind(hospital_dfrm, ageweight)
hospital_dfrm
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", paint = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
# Adding rows to an existing dataframe ----
matthew <- data.frame(list(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205))
carol <- data.frame(list(patients = "Carol", pain = "medium", gender = "F", age = 60, weight = 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
matthew <- data.frame(patients = "Matthew", pain = "mild", gender = "M", age = 81, weight = 205)
carol <- data.frame(patients = "Carol", pain = "medium", gender = "F", age = 60, weight = 137)
hospital_dfrm <- rbind(hospital_dfrm, matthew, carol)
hospital_dfrm
# Adding rows to an existing dataframe ----
hospital <- list(patients = c("Alex", "Fred", "Nancy", "Cloe", "Jack", "Emma", "Tom"),
pain = factor(c("none", "severe", "mild", "mild", "medium", "severe", "mild"), ordered = TRUE, levels = c("none", "mild", "medium", "severe")),
gender = c("F", "M", "F", "F", "M", "F", "M"))
hospital_dfrm <- data.frame(hospital)
hospital_dfrm
age <- c(65, 48, 43, 29, 77, 52, 35)
hospital_dfrm[["age"]] <- age
hospital_dfrm
weight <- c(148, 205, 218, 195, 226, 164, 181)
hospital_dfrm <- cbind(hospital_dfrm, weight)
newrow <- data.frame(patients = c("Matthew", "Carol"),
pain = c("mild", "medium"),
gender = c("M", "F"),
age = c(81, 60),
weight = c(205, 137))
hospital_dfrm <- rbind(hospital_dfrm, matthew, newrow)
hospital_dfrm
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
hospital_dfrm[order(hospital_dfrm$age, decreasing = TRUE)]
# Sorting a dataframe ----
hospital_dfrm[order(hospital_dfrm$age), ]
hospital_dfrm[order(hospital_dfrm$age, decreasing = TRUE), ]
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
temp
hospital_dfrm <- temp
hospital_dfrm
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Editing a dataframe ----
temp <- edit(hospital_dfrm)
temp
hospital_dfrm <- temp
hospital_dfrm
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Omitting NA values from a dataframe ----
temp1 <- edit(hospital_dfrm)
temp1
hospital_clean <- na.omit(temp1)
hospital_clean
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
studyhHours = c(2, 10, 9, 5, 8),
Gender = factor(c("M", "F", "F", "M", "M")))
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
mydata2 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
examScore = c(5, 10, 15, 20, 25),
Time = c(30, 40, 15, 25, 32))
# Merging data ----
mydata1 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
studyhHours = c(2, 10, 9, 5, 8),
Gender = factor(c("M", "F", "F", "M", "M")))
mydata2 <- data.frame(studentName = c("Jack", "Laura", "Ella", "Chris", "Seth"),
examScore = c(5, 10, 15, 20, 25),
Time = c(30, 40, 15, 25, 32))
?merge
mydata3 <- merge(mydata1, mydata2, by = "studentName")
mydata3
# Accessing individual columns
plot(mydata3$studyhHours, mydata3$examScore)
# Accessing by using with() ----
with(data = mydata3, expr = plot(studyhHours, examScore))
with(mydata3, mean(studyhHours))
summary(mydata3$examScore[mydata3$Gender == "M"])
with(mydata3, mean(examScore))
with(mydata3[mydata3$Gender == "M"], mean(examScore))
with(mydata3[mydata3$Gender == "M",], mean(examScore))
summary(mydata3$examScore[mydata3$Gender == "M"])
with(mydata3[mydata3$Gender == "M",], mean(examScore))
with(mydata3, summary(examScore[Gender == "M"]))
with(mydata3, summary(examScore[Gender == "M"]))
with(mydata3, summary(examScore[Gender == "F"]))
rm(list = ls())
planets <- c("Earth", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(1, 0.382, 0.949, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(1, 58.64, -243.02, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planets_df <- data.frame(list(planets, type, diameter, rotation, rings))
planets_df
planets_df <- data.frame(list(planets = planets, type = type, diameter = diameter, rotation = rotation, rings = rings))
planets_df
# b: Use str() to make sure there are 8 observations and5 variables
str(planets_df)
# a: Encode the type as a factor.
typefac <- as.factor(type)
typefac
# b: Overwrite the type in the planets_df with the new factor
planets_df[["type"]] <- typefac
planets_df
# c: Display the structure of planets_df to make sure it's right
str(planets_df)
names(planets_df) <- c("NAME", "TYPE", "DIAMETER", "ROTATION", "HAS_RINGS")
planets_df
# a: Select the type of Jupiter
planets_d[["Jupiter", "TYPE"]]
# a: Select the type of Jupiter
planets_df[["Jupiter", "TYPE"]]
# a: Select the type of Jupiter
planets_df[[5, "TYPE"]]
# b: Store the entire rotation column as a vector and print it
rotationvec <- planets_df$ROTATION
rotationvec
# c: Create a data frame closest_planets_df for the first three planets
closest_planets_df <- planets_df[c(2, 3, 1), ]
closest_planets_df
# d: Create a dataframe furthest_planets_df for the last three planets
furthest_planets_df <- planets_df[c(6, 7, 8), ]
furthest_planets_df
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[2, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[c("DIAMETER", "ROTATION"), ]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, c(3, 4)]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[, "DIAMETER"]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, "DIAMETER"]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER", "ROTATION")]]
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("DIAMETER", "ROTATION")]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[[3, c("ROTATION")]]
venus_data
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- select(planets_df[3], c("DIAMETER", "ROTATION"))
?select
# e: Select the diameter and rotation for Venus and save it to venus_data
venus_data <- planets_df[3, c("DIAMETER", "ROTATION")]
venus_data
# f: Select the last 5 rows of only DIAMETER and assign it to furthest_planets_diameter
planets_df
# f: Select the last 5 rows of only DIAMETER and assign it to furthest_planets_diameter, then print it
furthest_planets_diameter <- planets_df[4:8, "DIAMETER"]
furthest_planets_diameter
# g: Use the $ to create rings_vector that contains all the HAS_RINGS values.
rings_vector <- planets_df$HAS_RINGS
rings_vector
?subset
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, select = HAS_RINGS)
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, select = (HAS_RINGS == TRUE))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, subset = (HAS_RINGS == TRUEs))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, subset = (HAS_RINGS == TRUE))
planets_with_rings_df
# h: Assign to planets_with_rings_df the data where HAS_RINGS = TRUE
planets_with_rings_df <- subset(planets_df, (HAS_RINGS == TRUE))
planets_with_rings_df
# i: Create a dataframe small_planets_df with planets that have a smaller diameter than Earth.
small_planets_df <- subset(planets_df, (DIAMETER < 1.0))
small_planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (ROTATION > 1.0))
slow_planets_df
planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (ROTATION > 1.0))
slow_planets_df
# j: Make a dataframe slow_planets_df with planets that have a longer rotation period than Earth.
slow_planets_df <- subset(planets_df, (abs(ROTATION) > 1.0))
slow_planets_df
Orange
ChickWeight[1:5,]
ChickWeight
ChickWeight[1:5,]
head(ChickWeight)
head(ChickWeight, 10)
head(ChickWeight)
dim(ChickWeight)
mean(ChickWeight[,1])
install.packages("tseries")
library("tseries")
data(ice.river)
head(ice.river)
tail(ice.river)
dim(ice.river)
?read.table
setwd("~/R Stuff/my_Inputs_Outputs")
# Read External Files ----
myhospital <- read.table(file = "myhospital.txt",
header = True, sep = " ",
na.strings = "*")
# Read External Files ----
myhospital <- read.table(file = "myhospital.txt",
header = TRUE, sep = " ",
na.strings = "*")
myhospital
class(myhospital)
dim(myhospital)
# Grades.txt file ----
my_grades <- read.table(file = "grades.txt", header = TRUE, skip = 7)
my_grades
# Grades.txt file ----
my_grades <- read.table(file = "grades.txt", header = TRUE, skip = 7, na.strings = "*")
my_grades
str(my_grades)
with(my_grades, Participation >= 5)
my_grades$Participation >= 5
my_grades[my_grades$Participation >= 5, ]
# Grades.txt file exercise ----
my_grades <- read.table(file = "grades.txt", header = TRUE, skip = 7, na.strings = "*")
my_grades
str(my_grades)
my_grades[my_grades$Participation >= 5, ]
# Grades.txt file exercise ----
my_grades <- read.table(file = "grades.txt", header = TRUE, skip = 7, na.strings = "*", sep = "\t")
my_grades
str(my_grades)
my_grades[my_grades$Participation >= 5, ]
# Choosing files ----
file.choose()
# Choosing files ----
file.choose()
mygrades <- read.table(file = "C:\\Users\\wfranzen\\Documents\\R Stuff\\my_Inputs_Outputs\\grades.txt",
header = TRUE,
sep = " ",
na.strings = "*")
mygrades <- read.table(file = "C:\\Users\\wfranzen\\Documents\\R Stuff\\my_Inputs_Outputs\\myhospital",
header = TRUE,
sep = " ",
na.strings = "*")
mygrades <- read.table(file = "C:\\Users\\wfranzen\\Documents\\R Stuff\\my_Inputs_Outputs\\myhospital.txt",
header = TRUE,
sep = " ",
na.strings = "*")
myhospital <- read.table(file = "C:\\Users\\wfranzen\\Documents\\R Stuff\\my_Inputs_Outputs\\myhospital.txt",
header = TRUE,
sep = " ",
na.strings = "*")
ls()
rm (list=ls())
myhospital <- read.table(file = file.choose(),
header = TRUE,
sep = " ",
na.strings = "*")
myhospital
str(myhospital)
myhospital$pain <- factor(myhospital$pain, ordered = TRUE, levels = c("none", "mild", "medium", "severe"))
myhospital
myhospital$pain <- factor(myhospital$pain, ordered = TRUE, levels = c("none", "mild", "medium", "severe"))
myhospital$gender <- factor(myhospital$gender, ordered = FALSE, levels = c("F", "M"))
myhospital
str(myhospital)
install.packages("openxlsx")
library("openxlsx")
?read.xlsx
car_data <- read.xlsx(xslxFile = "cars1.xlsx")
car_data
car_data <- read.xlsx("cars1.xlsx")
car_data
car_data <- read.xlsx(xlsxFile = "cars1.xlsx")
car_data
car_data <- read.xlsx(xlsxFile = "cars1.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE)
car_data
cars <- read.xlsx(xlsxFile = "cars1.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE)
cars
str(cars)
dim(cars)
cars2 <- read.xlsx(xlsxFile = "cars1.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = 1:10,
cols = 1:4)
cars2
cars2 <- read.xlsx(xlsxFile = "cars1.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = 1:11,
cols = 1:4)
cars2
mean(cars2$MPG)
?read.csv
# Reading CSV External Files ----
cars3 <- read.csv("cars2.csv", header = TRUE, sep = ",")
cars3
# Reading CSV External Files ----
cars3 <- read.table("cars2.csv", header = TRUE, sep = ",")
cars3
cars4 <- read.csv("cars2.csv", header = TRUE, sep = ",")
cars4
